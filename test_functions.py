from def_lesson_ch2 import grade_to_score, is_passed, final_price, apply_discount, check_test_result
from def_lesson3 import parse_user_data
from def_lesson4 import get_user_by_id
from pytest import approx
import requests
import pytest
# ### 2. ‚úÖ `parse_user_data(data_str)`
#
# * –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–æ–≤–∞—Ä—å, —Å—Ç—Ä–æ–∫–∏, –∫–ª—é—á–∏
# * –•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è `assert result == {...}`

def test_check_test_result():
    assert check_test_result(["OK", "OK", "OK", "OK", "FAIL"],5) == "–°–¥–∞–Ω–æ"
    assert check_test_result(["OK", "OK", "OK", "FAIL", "FAIL"],5) == "–ù–µ —Å–¥–∞–Ω–æ"
    assert check_test_result(["OK", "OK", "FAIL", "FAIL", "FAIL"],5) == "–ù–µ —Å–¥–∞–Ω–æ"
    assert check_test_result(["OK", "OK", "OK", "OK", "OK"], 5) == "–°–¥–∞–Ω–æ"
    assert check_test_result(["FAIL", "FAIL", "FAIL", "FAIL", "FAIL"], 5) == "–ù–µ —Å–¥–∞–Ω–æ"


def test_parse_user_data():
    assert parse_user_data("login=alex;email=alex@test.com;id=42") == {'login': 'alex', 'email': 'alex@test.com', 'id': '42'}

def test_grade_to_score():
    assert grade_to_score("–æ—Ç–ª–∏—á–Ω–æ") == 5
    assert grade_to_score("—Ö–æ—Ä–æ—à–æ") == 4
    assert grade_to_score("—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ") == 3
    assert grade_to_score("—á—Ç–æ-—Ç–æ –ª–µ–≤–æ–µ") == 2

def test_is_passed():
    assert is_passed("–æ—Ç–ª–∏—á–Ω–æ") is True
    assert is_passed("—Ö–æ—Ä–æ—à–æ") is True
    assert is_passed("—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ") is True
    assert is_passed("–ø–ª–æ—Ö–æ") is False
    assert is_passed("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") is False

@pytest.mark.parametrize("grade,expected",[
    ("–æ—Ç–ª–∏—á–Ω–æ", True),
    ("—Ö–æ—Ä–æ—à–æ", True),
    ("—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", True),
    ("–ø–ª–æ—Ö–æ", False),
    ("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", False)
])
def test_is_passed_parametrize(grade,expected):
        assert is_passed(grade) is expected


# üëâ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
# –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –¥–∞–≤–∞–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º:
# final_price(price, discount, vat)
# –¢–∞–º –Ω–∞–¥–æ –±—ã—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º —Å float, –ø–æ—Ç–æ–º—É —á—Ç–æ pytest –º–æ–∂–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 0.000001.
# –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å:
# –∫–∞–∫ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ round(...);
# –∏–ª–∏ —á–µ—Ä–µ–∑ pytest.approx() ‚Äî –∫–∞–∫ –¥–µ–ª–∞—é—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
# –ì–æ—Ç–æ–≤ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?
def test_final_price():
    assert final_price(1000, 20, 20) == approx(960.0)
    assert final_price(200, 10, 10) == approx(198.0)
    assert final_price(500, 0, 0) == approx(500.0)

# –û—Ç–ª–∏—á–Ω–æ, –°–∞—à–∞! üî• –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –±–æ–µ–≤–æ–º –¥—É—Ö–µ. –†–∞–∑ —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è ‚Äî –∑–Ω–∞—á–∏—Ç, –¥–µ–ª–æ –ø–æ–π–¥—ë—Ç.

# ---

## üß™ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–µ–π—á–∞—Å –ø–æ–∫—Ä—ã—Ç—å –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏ (–∏–∑ —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ):

### 1. ‚úÖ `apply_discount(price, discount)`

def test_apply_discount():
    assert apply_discount(1000,20) == approx(800.0)
    assert apply_discount(3333, 10) == approx(2999.7)
    assert apply_discount(60343, 40) == approx(36205.8)

def test_get_user_by_id():
    assert get_user_by_id(1)["name"] == "Alice"
    assert get_user_by_id(999) is None
    assert get_user_by_id(2)["name"] == "Bob"
    assert get_user_by_id(2)["email"] == "bob@test.com"

@pytest.mark.parametrize("user_id,field,expected",
                         [
                             (1,"email","alice@test.com"),
                             (2,"name","Bob"),
                             (1,"name","Alice"),
                             (2, "email","bob@test.com")
                         ])
def test_get_user_by_id_parametrize(user_id,field,expected):
    assert get_user_by_id(user_id)[field] == expected

def test_post_then_get(base_url, headers, sample_post_payload):
    """
    –¢–µ—Å—Ç: —Å–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç - –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–æ id, —Å–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ(–≤ mock API —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    –ª–æ–≥–∏–∫–∏)
    """
#1. –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
    post_response = requests.post(f"{base_url}/posts",json=sample_post_payload)
    assert  post_response.status_code == 201

    post_data = post_response.json()
    created_id = post_data["id"]

#2. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –ø–æ id
    get_response = requests.get(f"{base_url}/posts/{created_id}")
    assert get_response.status_code == 200

    get_data = get_response.json()

    #—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–ª—è. —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç –∏ —ç—Ç–æ –æ–∫
    assert "title" in get_data
    assert isinstance(get_data["userId"],int)


