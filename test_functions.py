from def_lesson_ch2 import grade_to_score, is_passed, final_price, apply_discount, check_test_result
from def_lesson3 import parse_user_data
from pytest import approx
# ### 2. ‚úÖ `parse_user_data(data_str)`
#
# * –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–æ–≤–∞—Ä—å, —Å—Ç—Ä–æ–∫–∏, –∫–ª—é—á–∏
# * –•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è `assert result == {...}`

def test_check_test_result():
    assert check_test_result(["OK", "OK", "OK", "OK", "FAIL"],5) == "–°–¥–∞–Ω–æ"
    assert check_test_result(["OK", "OK", "OK", "FAIL", "FAIL"],5) == "–ù–µ —Å–¥–∞–Ω–æ"
    assert check_test_result(["OK", "OK", "FAIL", "FAIL", "FAIL"],5) == "–ù–µ —Å–¥–∞–Ω–æ"
    assert check_test_result(["OK", "OK", "OK", "OK", "OK"], 5) == "–°–¥–∞–Ω–æ"
    assert check_test_result(["FAIL", "FAIL", "FAIL", "FAIL", "FAIL"], 5) == "–ù–µ —Å–¥–∞–Ω–æ"


def test_parse_user_data():
    assert parse_user_data("login=alex;email=alex@test.com;id=42") == {'login': 'alex', 'email': 'alex@test.com', 'id': '42'}

def test_grade_to_score():
    assert grade_to_score("–æ—Ç–ª–∏—á–Ω–æ") == 5
    assert grade_to_score("—Ö–æ—Ä–æ—à–æ") == 4
    assert grade_to_score("—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ") == 3
    assert grade_to_score("—á—Ç–æ-—Ç–æ –ª–µ–≤–æ–µ") == 2

def test_is_passed():
    assert is_passed("–æ—Ç–ª–∏—á–Ω–æ") is True
    assert is_passed("—Ö–æ—Ä–æ—à–æ") is True
    assert is_passed("—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ") is True
    assert is_passed("–ø–ª–æ—Ö–æ") is False
    assert is_passed("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") is False


# üëâ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
# –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –¥–∞–≤–∞–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º:
# final_price(price, discount, vat)
# –¢–∞–º –Ω–∞–¥–æ –±—ã—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º —Å float, –ø–æ—Ç–æ–º—É —á—Ç–æ pytest –º–æ–∂–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 0.000001.
# –ú–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å:
# –∫–∞–∫ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ round(...);
# –∏–ª–∏ —á–µ—Ä–µ–∑ pytest.approx() ‚Äî –∫–∞–∫ –¥–µ–ª–∞—é—Ç –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
# –ì–æ—Ç–æ–≤ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?
def test_final_price():
    assert final_price(1000, 20, 20) == approx(960.0)
    assert final_price(200, 10, 10) == approx(198.0)
    assert final_price(500, 0, 0) == approx(500.0)

# –û—Ç–ª–∏—á–Ω–æ, –°–∞—à–∞! üî• –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –±–æ–µ–≤–æ–º –¥—É—Ö–µ. –†–∞–∑ —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è ‚Äî –∑–Ω–∞—á–∏—Ç, –¥–µ–ª–æ –ø–æ–π–¥—ë—Ç.

# ---

## üß™ –ß—Ç–æ –º–æ–∂–Ω–æ —Å–µ–π—á–∞—Å –ø–æ–∫—Ä—ã—Ç—å –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏ (–∏–∑ —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ):

### 1. ‚úÖ `apply_discount(price, discount)`

def test_apply_discount():
    assert apply_discount(1000,20) == approx(800.0)
    assert apply_discount(3333, 10) == approx(2999.7)
    assert apply_discount(60343, 40) == approx(36205.8)

# * –ß–∏—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞, –±–µ–∑ –ù–î–°
# * –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è `approx`
#
# ### 2. ‚úÖ `parse_user_data(data_str)`
#
# * –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–ª–æ–≤–∞—Ä—å, —Å—Ç—Ä–æ–∫–∏, –∫–ª—é—á–∏
# * –•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è `assert result == {...}`



#
# ### 3. ‚úÖ `test_result(answers, total_questions)`
#
# * –¢–∞–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã, —Å—Ç—Ä–æ–∫–∏ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ç—å `"–°–¥–∞–Ω–æ"` –∏ `"–ù–µ —Å–¥–∞–Ω–æ"`
#
# ---
#
# ## üìå –ü—Ä–µ–¥–ª–∞–≥–∞—é: –ø—Ä–æ—Ç–µ—Å—Ç–∏–º `parse_user_data`
#
# –í–æ—Ç —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –ø–∏—Å–∞–ª:
#
# ```python
# def parse_user_data(data_str):
#     result = {}
#     parts = data_str.split(";")
#     for pair in parts:
#         key_value = pair.strip().split("=")
#         if len(key_value) == 2:
#             key, value = key_value
#             result[key.strip()] = value.strip()
#     return result
# ```
#
# ---
#
# ## üîç –ß—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —Ç–µ—Å—Ç–∞—Ö
#
# | –í—Ö–æ–¥                                     | –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç                                       |
# | ---------------------------------------- | --------------------------------------------------------- |
# | `"login=alex;email=alex@test.com;id=42"` | `{"login": "alex", "email": "alex@test.com", "id": "42"}` |
# | `""`                                     | `{}`                                                      |
# | `"x=1;x=2"`                              | `{"x": "2"}` (–¥—É–±–ª–∏–∫–∞—Ç ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ)              |
# | `"badpair;id=5"`                         | `{"id": "5"}` (–º—É—Å–æ—Ä –ø—Ä–æ–ø—É—â–µ–Ω)                            |
#
# ---
#
# ## üí° –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
#
# * –°–æ–∑–¥–∞—Ç—å `test_parse_user_data()`
# * –°–¥–µ–ª–∞—Ç—å —Ö–æ—Ç—è –±—ã **2‚Äì3 `assert`**
# * –Ø –ø–æ—Å–º–æ—Ç—Ä—é –∏ –¥–∞–º —Ä–µ–≤—å—é
#
# –ì–æ—Ç–æ–≤?
