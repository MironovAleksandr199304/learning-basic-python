#  –ó–∞–¥–∞—á–∞: parse_user_data
# –£ —Ç–µ–±—è –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
# "login=alex;email=alex@test.com;id=42"
# –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é:
# def parse_user_data(data_str): ...
# –∫–æ—Ç–æ—Ä–∞—è –≤–µ—Ä–Ω—ë—Ç —Å–ª–æ–≤–∞—Ä—å:
# {
#   "login": "alex",
#   "email": "alex@test.com",
#   "id": "42"
# }
# ‚ö†Ô∏è –£—Å–ª–æ–≤–∏—è:
# –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ;
# –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã ‚Äî –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å;
# –µ—Å–ª–∏ –ø–æ–ª–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ;
# –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –±–µ–∑ =, –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å {}.
# üìå –ü–æ–¥—Å–∫–∞–∑–∫–∏ (–Ω–µ –∫–æ–¥!):
# –†–∞–∑–±–µ–π –ø–æ ; ‚Üí –ø–æ–ª—É—á–∏—à—å –ø–∞—Ä—ã;
# –ö–∞–∂–¥—É—é –ø–∞—Ä—É —Ä–∞–∑–±–µ–π –ø–æ =;
# –ò—Å–ø–æ–ª—å–∑—É–π strip() ‚Äî –æ–Ω —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç;
# –ú–æ–∂–Ω–æ –∫–æ–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–æ–≤–∞—Ä—å ‚Äî dict[key] = value.



def parse_user_data(data_str):
    data_str = data_str.replace(" ","").split(";")  #–†–∞–∑–±–µ–π –ø–æ ; ‚Üí –ø–æ–ª—É—á–∏—à—å –ø–∞—Ä—ã;
    dict_user = {}
    for pair in data_str:
        key_value = pair.split("=")
        if len(key_value) == 2:
            key,value = key_value
            dict_user[key] = value
        else:
            continue
    return dict_user
print(parse_user_data("login=alex;email=alex@test.com;id=42"))
