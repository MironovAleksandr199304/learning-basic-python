# üß™ –ó–∞–¥–∞—á–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —É—Ä–æ–≤–µ–Ω—å 1
# ‚úÖ –ó–∞–¥–∞—á–∞ 1 ‚Äî –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é greet(name), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É:
# "–ü—Ä–∏–≤–µ—Ç, <name>!"
# –ü—Ä–∏–º–µ—Ä:
# print(greet("–°–∞—à–∞"))  # –ü—Ä–∏–≤–µ—Ç, –°–∞—à–∞!
def greet(name):
    return f"–ü—Ä–∏–≤–µ—Ç, {name}!"
print(greet("–°–∞—à–∞"))
# ‚úÖ –ó–∞–¥–∞—á–∞ 2 ‚Äî –°—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é add(a, b), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª.
# –ü—Ä–∏–º–µ—Ä:
# print(add(3, 5))  # 8
def add(a,b):
    return a+b
print(add(3,5))
# ‚úÖ –ó–∞–¥–∞—á–∞ 3 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—ë—Ç–Ω–æ—Å—Ç–∏
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é is_even(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ, –∏ False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
# –ü—Ä–∏–º–µ—Ä:
# print(is_even(4))  # True
# print(is_even(7))  # False
def is_even(n):
    return n%2 == 0
print(is_even(7))
# ‚úÖ –ó–∞–¥–∞—á–∞ 4 ‚Äî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é compare(a, b), –∫–æ—Ç–æ—Ä–∞—è:
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–†–∞–≤–Ω–æ', –µ—Å–ª–∏ a == b
# '–ë–æ–ª—å—à–µ', –µ—Å–ª–∏ a > b
# '–ú–µ–Ω—å—à–µ', –µ—Å–ª–∏ a < b
def compare(a,b):
    if a == b:
        return "–†–∞–≤–Ω–æ"
    elif a > b:
        return "–ë–æ–ª—å—à–µ"
    else:
        return "–ú–µ–Ω—å—à–µ"
print(compare(6,6))
# ‚úÖ –ó–∞–¥–∞—á–∞ 5 ‚Äî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é count_chars(text), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.
# –ü—Ä–∏–º–µ—Ä:
# print(count_chars("–°–∞—à–∞ —É—á–∏—Ç Python"))  # 15

def count_chars(text):
    text = text.replace(" ","")
    return len(text)
print(count_chars("–°–∞—à–∞ —É—á–∏—Ç Python"))

# üß™ –ó–∞–¥–∞—á–∏ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —É—Ä–æ–≤–µ–Ω—å 2
# ‚úÖ –ó–∞–¥–∞—á–∞ 6 ‚Äî –ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é square(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞.
# –ü—Ä–∏–º–µ—Ä:
# print(square(5))  # 25
def square(n):
    return n**2
print(square(7))

# ‚úÖ –ó–∞–¥–∞—á–∞ 7 ‚Äî –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é capitalize_first(text), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ç—Ä–æ–≥–∞–π).
# –ü—Ä–∏–º–µ—Ä:
# print(capitalize_first("python"))  # Python
# print(capitalize_first("—Å–∞—à–∞"))    # –°–∞—à–∞
def capitalize_first(text):
    return text[0].upper() + text[1:].lower() if text else ""
print(capitalize_first("PYTHON"))
print(capitalize_first("–°–∞—à–∞"))
#
# ‚úÖ –ó–∞–¥–∞—á–∞ 8 ‚Äî –ü–æ–¥—Å—á—ë—Ç –≥–ª–∞—Å–Ω—ã—Ö
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é count_vowels(text), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ –≤ —Å—Ç—Ä–æ–∫–µ. –°—á–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –≥–ª–∞—Å–Ω—ã–µ: –∞, –µ, —ë, –∏, –æ, —É, —ã, —ç, —é, —è (—Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω).
# –ü—Ä–∏–º–µ—Ä:
# print(count_vowels("–°–∞—à–∞ —É—á–∏—Ç –ü–∏—Ç–æ–Ω"))  # 6
def count_vowels(text):
    gls = ["–∞", "–µ", "—ë", "–∏", "–æ", "—É", "—ã", "—ç", "—é", "—è"]
    count_gls = 0
    for char in text:
        if char.lower() in gls:
            count_gls += 1
    return count_gls
print(f"–í—Å–µ–≥–æ –≥–ª–∞—Å–Ω—ã—Ö: {count_vowels("–°–∞—à–∞ —É—á–∏—Ç –ü–∏—Ç–æ–Ω")}")

# ‚úÖ –ó–∞–¥–∞—á–∞ 9 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é check_password(password), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
# '–°–ª–∞–±—ã–π', –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –∫–æ—Ä–æ—á–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
# '–°—Ä–µ–¥–Ω–∏–π', –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ ‚â•8, –Ω–æ –≤ –Ω—ë–º –Ω–µ—Ç —Ü–∏—Ñ—Ä
# '–°–∏–ª—å–Ω—ã–π', –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ ‚â•8 –∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞
# –ü–æ–¥—Å–∫–∞–∑–∫–∞: any(char.isdigit() for char in password)

def check_password(password):
    if len(password) < 8:
        return "–°–ª–∞–±—ã–π"
    elif any(char.isdigit() for char in password):
        return "–°–∏–ª—å–Ω—ã–π"
    else:
        return "–°—Ä–µ–¥–Ω–∏–π"
print(check_password("qwertyqwerty1"))

#
# ‚úÖ –ó–∞–¥–∞—á–∞ 10 ‚Äî –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–∫–∏–¥–∫–∏
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é apply_discount(price, discount), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö.
# –ü—Ä–∏–º–µ—Ä:
# print(apply_discount(1000, 20))  # 800.0

def apply_discount(price, discount):
    disc_price = price * (1 - discount/100)
    return disc_price
print(f"–í–∞—à–∞ —Ü–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏: {apply_discount(10000,20)}")
